1. Parallelise model training
2. Figure out a scheme where you begin your first round by training a lot of models but on a small dataset?
3. Research more heuristics and bake them into the automation
4. Make each thread constantly look up and write to the variable containing the score of the best model
If the best model has a higher score than what's currently being trained, just forget about it and do another model
7. Add support for stacked models (how is that going to play out?)
10. Python != Java. Don't do type checking. Just do duck typing (manually checking if it satisfies a certain interface)
11. Although, maybe if we can introduce types and cyphon, we could speed up the overall project
12. GPU training?
13. https://elitedatascience.com/feature-engineering-best-practices
14. Use sklearn pipelines?
15. Add Keras support for neural nets (again, GPU optimised?)
16. Combine all preprocessors into one neat pipeline later
17. For now just create a metadata file (possibly in config) that specifies which transformation should be applied to
which column. Later add intelligence to automate it.
18. Bake best practices for preprocessing into a decision tree. Start with integer/float/string columns and bake in special cases
19. Fix regex of  LogTransform and the rest. If the first non-\t and non-space character is a dot, don't strip. Otherwise, strip.
20. For the text analytics section, add my synonym substitution heuristic
21. But ultimately create a GAN based data augmenter
22. Mark private methods as private.
23. Add categorical hashing
24. Train decision trees to validate preprocessing steps
25. Implement preprocessing logic as a tree (with the accompanying data structure)
26. Print execution plan when preprocessing checks finish
27. Create a config file to define the checker graph
28. Convert yaml to graphml -> visualise checker graph in networkx
29. Fix import of Checkers
30. Start putting references to preprocessing steps into checkers
31. Integrate preprocessor graph into preprocessing. There's really no reason to have a separate class to read in a yaml
file...
32. Integrate AutoKeras for deep learning optimisation

YAML LINTER http://www.yamllint.com/